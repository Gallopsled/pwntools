#!/usr/bin/env python2
import sys, os, re, tempfile, subprocess

READELF = '/usr/bin/readelf'
LDD = '/usr/bin/ldd'
PAGE_SIZE = 4096
if '-v' in sys.argv:
    sys.argv.remove('-v')
    VERBOSE = True
else:
    VERBOSE = False

def path(s):
    return os.path.join(sys.path[0], s)

def nasm(s):
    with tempfile.NamedTemporaryFile() as tmp:
        tmp.write(s)
        tmp.flush()
        r = subprocess.check_output(['nasm', '-o', '/dev/stdout', tmp.name])
    return r

def die(s):
    print s
    exit(0)

if not (os.access(READELF, os.X_OK) and os.path.isfile(READELF)):
    die('Missing /usr/bin/readelf, please install binutils')

if len(sys.argv) <> 3:
    print 'usage: %s target payload.asm' % sys.argv[0]
    exit()

target = sys.argv[1]
payload = sys.argv[2]

def exists(f):
    return os.access(f, os.R_OK) and os.path.isfile(f)

for f in [target, payload]:
    if not exists(f):
        die('File %s is not readable or does not exist' % f)

if exists(target + '.bak'):
    print 'Reading from %s.bak' % target
    with open(target + '.bak') as fd:
        filedata = list(fd.read())
else:
    print 'Writing backup to %s.bak' % target
    with open(target) as fd:
        filedata = list(fd.read())
    with open(target + '.bak', 'w') as fd:
        fd.write(''.join(filedata))

def load(path):
    '''returns (elfclass, entrypoint, executable sections)'''
    # -h : ELF header
    # -W : wide output
    # -S : sections
    cmd = [READELF, '-hWS', path]
    out = subprocess.check_output(cmd)

    elfclass = re.findall('Class:\s*(.*$)', out, re.MULTILINE)[0]
    entrypoint = int(re.findall('Entry point address:\s*(.*$)', out, re.MULTILINE)[0], 16)

    field = '\s+(\S+)'
    posint = '[123456789]\d*'
    flags = '\s+([WAXMSILGTExOop]*)'
    sections = {}
    lines = re.findall('^\s+\[\s*' + posint + '\]' + field * 6 + flags, out, re.MULTILINE)
    for name, _type, addr, off, size, _es, flgs in lines:
        if 'X' not in flgs: continue
        addr = int(addr, 16)
        off = int(off, 16)
        size = int(size, 16)
        if name == '.plt':
            plt = (addr, size)
        sections[name] = {'addr' : addr,
                          'offset': off,
                          'size'  : size,
                          }
    return (elfclass, entrypoint, sections)

elfclass, entrypoint, sections = load(target + '.bak')

pages = (len(filedata) - 1) // PAGE_SIZE + 1
bootaddr = pages * PAGE_SIZE
print 'ELF file is %d bytes, padding to %d pages' % (len(filedata), pages)
filedata += '\0' * (bootaddr - len(filedata))

print 'Assembling dummy loader to determine size'
with open(path('loader.asm')) as f:
    loadercode = f.read()
code = loadercode.replace('#OFFSET#', str(bootaddr)).replace('#LENGTH#', '0')
loaderlen = len(nasm(code))
print '  Loader size: %d bytes' % loaderlen

print 'Looking up _start, and copying original code'
for name, sec in sections.items():
    addr = sec['addr']
    size = sec['size']
    offset = sec['offset']
    if entrypoint >= addr and entrypoint < addr + size:
        if entrypoint + loaderlen > addr + size:
            print '!! Section %s is not big enough to hold loader' % name
            exit()
        origaddr = entrypoint - addr + offset
        origcode = filedata[origaddr:origaddr + loaderlen]
        break

print 'Creating bootstrapper'
with open(path('bootstrapper.asm')) as f:
    code = f.read()

print '  Entry point: 0x%08x' % entrypoint
code = code.replace('#ORIG_ADDR#',
                    '0x%08x' % entrypoint)
code = code.replace('#ORIG_CODE#',
                    ', '.join('0x%02x' % ord(c) for c in origcode))
boot = nasm(code)
bootlen = len(boot)
print '  Appended bootstrapper: %d bytes' % len(boot)
filedata += boot

print 'Assembling payload'
with open(payload) as f:
    code = f.read()

payload = nasm(code)
payloadlen = len(payload)
print '  Appended payload: %d bytes' % len(payload)
filedata += payload

print 'Creating loader'
code = loadercode.replace('#OFFSET#', str(bootaddr))
code = code.replace('#LENGTH#', str(bootlen + payloadlen))
loader = nasm(code)
if len(loader) <> loaderlen:
    print '!! Real loader is not the same size as dummy loader -- this is a BUG'
    exit()
filedata[origaddr:origaddr + loaderlen] = list(loader)
print '  Wrote %d bytes loader at _start' % loaderlen

print 'Writing ELF file'
with open(target, 'w') as f:
    f.write(''.join(filedata))
print '  DONE!'
