#!/usr/bin/env python2
import pwn, sys, hashlib, os, socket, errno
import pwn.log as log

if len(sys.argv) not in [2,3]:
    print('Usage: ' + sys.argv[0] + ' host [filename]\n')
    sys.exit()

PIPED = len(sys.argv) == 2
BLOCK = 4096

try:
    f = open(sys.argv[2], 'r') if not PIPED else sys.stdin
except Exception as e:
    pwn.die('Unable to open file ' + sys.argv[2], e)

try:
    h = pwn.remote(sys.argv[1], port = 1337, timeout = None)
except Exception as e:
    pwn.die('Unable to connect to ' + sys.argv[1] + ':1337', e)

i = 0
log.waitfor('Sending data')
try:
    if PIPED:
        data = f.read()
        digest = hashlib.md5(data).digest()
        numb = len(data)
        h.send(pwn.p64(numb))
        while len(data) > 0:
            h.send(data[:BLOCK])
            data = data[BLOCK:]
            i += BLOCK
            log.status('%s/%s (%d%%)' % (pwn.size(i), pwn.size(numb), 100 * i / numb))
    else:
        f.seek(0, os.SEEK_END)
        numb = f.tell()
        f.seek(0, os.SEEK_SET)
        h.send(pwn.p64(numb))
        m = hashlib.md5()
        while not f.closed:
            d = f.read(4096)
            if not d:
                break
            m.update(d)
            h.send(d)
            i += len(d)
            log.status('%s/%s (%d%%)' % (pwn.size(i), pwn.size(numb), 100 * i / numb))
        f.close()
        digest = m.digest()
except socket.error, e:
    if e.errno == errno.ECONNRESET:
        log.warning('Connection reset by peer')
        pwn.die()

h.send(digest)
log.succeeded()
verify = h.recv(16)
if len(verify) < 16:
    log.failure('Could not recieve MD5 digest')
    pwn.die()

if verify == digest:
    log.success('MD5 digest is OK: %s' % pwn.enhex(digest))
else:
    log.failure('MD5 digests does not match')
    log.failure('Computed: %s' % pwn.enhex(digest))
    log.failure('Recieved: %s' % pwn.enhex(verify))
    pwn.die()
