name: Continuous Integration
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        python-version: [2.7, 3.8]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 10 # used only for optimizing jre away

    - name: Cache for pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ matrix.os }}-cache-pip

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Lint
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7 --show-source --statistics --exclude=android-?dk  # TODO: Add F82
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=pwnlib/constants,android-?dk,.git,__pycache__

    - name: Detect whether java is needed
      id: java-needed
      env:
        GITHUB_REF: ${{ github.event.ref }}
        GITHUB_COMMIT_RANGE: ${{ github.event.before }}...${{ github.event.after }}
      run: |
        if echo "$GITHUB_REF" | grep -Eq 'staging|tags'; then
          echo "Found release or important branch ($GITHUB_REF), forcing tests."
        elif ! git show "$GITHUB_COMMIT_RANGE" >/dev/null; then
          echo 'Incorrect commit range, forcing android tests.'
        elif git log --stat "$GITHUB_COMMIT_RANGE" | grep -iE 'android|\<adb\>'; then
          echo 'Found Android-related commits, forcing tests.'
        else
          # clear files that cause Android doctests
          : > docs/source/adb.rst > docs/source/protocols/adb.rst
          exit 0
        fi
        echo ::set-output name=need::openjdk-8-jre-headless

    - name: Install Linux dependencies
      env:
        ANDROID_JRE: ${{ steps.java-needed.outputs.need }}
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends -o Acquire::Retries=3 \
          ash bash-static dash ksh mksh zsh \
          pandoc gdb gdbserver socat sshpass \
          binutils-multiarch qemu-user-static \
          binutils-aarch64-linux-gnu \
          binutils-arm-linux-gnueabihf \
          binutils-mips-linux-gnu \
          binutils-powerpc-linux-gnu \
          gcc-multilib \
          $ANDROID_JRE
        sudo apt-get install -y -o Acquire::Retries=3 \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabihf

    - name: Install android avd
      if:  steps.java-needed.outputs.need
      run: |
        USER=travis source travis/install.sh
        set | egrep '^(ANDROID|PATH)' >.android.env

    - name: Set up SSH
      run: |
        chmod og-rw ~ # see https://stackoverflow.com/a/60367309/3869724
        ssh-keygen -t ed25519 -f ~/.ssh/pwntools-ci -N ''
        cat > ~/.ssh/config <<EOF
        Host example.pwnme
            User $USER
            HostName 127.0.0.1
            IdentityFile ~/.ssh/pwntools-ci
        EOF
        echo -n 'from="127.0.0.1" ' | cat - ~/.ssh/pwntools-ci.pub > ~/.ssh/authorized_keys
        ssh -o 'StrictHostKeyChecking no' example.pwnme id

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install --upgrade flake8 appdirs
        python setup.py egg_info
        pip install --upgrade --editable .

    - name: Sanity checks
      run:  PWNLIB_NOTERM=1 python -c 'from pwn import *; print(pwnlib.term.term_mode)'

    - name: Install documentation dependencies
      run:  pip install -r docs/requirements.txt

    - name: Disable broken tests
      run: |
        rm -f docs/source/elf/corefile.rst
        rm -f docs/source/ui.rst

    - name: Coverage doctests
      run: |
        source .android.env || :
        echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope # required by some gdb doctests
        PWNLIB_NOTERM=1 coverage run -m sphinx -b doctest docs/source docs/build/doctest

    - name: Coverage running examples
      run: |
        export TERM=linux
        python travis/coverage_chdir.py examples/fmtstr examples/fmtstr/exploit.py
        python travis/coverage_chdir.py examples/fmtstr examples/fmtstr/exploit2.py
        coverage run examples/asm.py
        coverage run examples/asm.py
        coverage run examples/text.py
        # for f in examples/sigreturn_corefile_*.py; do coverage run "$f"; done # XXX something is wrong

    - name: Coverage running commandline tools
      run: |
        alias pwn='coverage run -m pwnlib.commandline.main'
        set -x
        
        export PWNLIB_NOTERM=1
        pwn cyclic 32
        pwn cyclic -l 0x62616161

        pwn shellcraft amd64.linux.sh

        pwn disasm ff3424c3ebfe

        pwn hex abcd
        pwn unhex 4141 4141

        head -c256 /dev/urandom | pwn phd

        pwn errno 2

        pwn constgrep -c freebsd -m ^PROT_ '3 + 4'
        pwn constgrep ^MAP_
        pwn constgrep ^O_

    - name: Build source and wheel distributions
      run: |
        python setup.py sdist
        python setup.py bdist_wheel --universal

    - uses: actions/upload-artifact@v2
      with:
        name: packages
        path: dist/

    - name: Upload coverage to coveralls.io
      run: |
        coverage combine
        COVERALLS_REPO_TOKEN=PP20MEgztXIQJJTguQwe2jeCh6Bm4lkbv coveralls

  staging-merge:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Gallopsled' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/heads/') && endsWith(github.event.ref, '-staging')
    needs: build
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 20
    - name: Push changes to protected branch
      env:
        GITHUB_REF: ${{ github.event.ref }}
      run: |
        BRANCH=${GITHUB_REF#refs/heads/}
        TARGET=${BRANCH%-staging}
        git branch -f "$TARGET"
        git push origin "$TARGET"

  pypi:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: build
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: packages
        path: dist

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@v1.1.0
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}

    - if: failure()
      run: ls -R
