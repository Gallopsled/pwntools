#!/usr/bin/env python
import pwn, sys, argparse, string
from pwn import de_bruijn, de_bruijn_find

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Cyclic pattern creator/finder")
    p.add_argument(
        '-a', '--alphabet',
        metavar = '<alphabet>',
        default = string.ascii_lowercase,
        help = 'The alphabet to use in the cyclic pattern',
        )
    p.add_argument(
        '-l', '--large-alphabet',
        action = 'store_true',
        help = 'Use a large alphabet (digits, letters, punctuation)',
        )
    p.add_argument(
        '-o', '--offset',
        action = 'store_true',
        help = 'Find offset of substring in cyclic pattern (given as hex '
               '(0x...), integer or string)',
        )
    p.add_argument(
        '-n', '--length',
        type = int,
        default = 4,
        help = 'Length of subsequence',
        )
    p.add_argument(
        'patsize',
        metavar = '<pattern|size>',
        help = 'Depending on the -o flag, 1) the desired size of the created '
               'pattern, or 2) the subpattern to find the offset of',
        )

    args = p.parse_args()

    if args.large_alphabet:
        alph = string.digits + string.ascii_letters + string.punctuation
    else:
        alph = args.alphabet

    if args.offset:
        pat = args.patsize

        if [x for x in pat if x not in alph]:
            pwn.die('Pattern contains characters outside selected alphabet. '
                    'Current alphabet is "%s".' % alph)

        if pat.startswith('0x'):
            pat = pwn.p32(int(pat[2:], 16) & 0xffffffff)
        elif pat.isdigit():
            pat = pwn.p32(int(pat, 10) & 0xffffffff)
        else:
            pat = pat[:args.length]

        if len(pat) < args.length:
            pwn.die('Subpattern must be %i bytes' % args.length)

        pwn.log.waitfor('Looking for pattern "%s"' % pat)
        offset = de_bruijn_find(pat, alph, n = args.length)
        if offset == -1:
            pwn.log.failed('given pattern does not exist in cyclic pattern')
        else:
            pwn.log.succeeded('found at ' + str(offset))
    else:
        print de_bruijn(int(args.patsize), n = args.length)
