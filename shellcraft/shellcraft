#!/usr/bin/env python2
import argparse, sys, pwn, os
from pwn.internal.shellcode_helper import registered as shellcodes
default_context = ['linux', 'i386', 'ipv4']

r = pwn.text.red
g = pwn.text.green
b = pwn.text.blue
banner = '\n'.join(['  ' + r('____') + '  ' + g('_') + '          ' + r('_') + ' ' + g('_') + '                 ' + b('__') + ' ' + r('_'),
                    ' ' + r('/ ___|') + g('| |__') + '   ' + b('___') + r('| |') + ' ' + g('|') + ' ' + b('___') + ' ' + r('_ __') + ' ' + g('__ _') + ' ' + b('/ _|') + ' ' + r('|_'),
                    ' ' + r('\___ \\') + g('| \'_ \\') + ' ' + b('/ _ \\') + ' ' + r('|') + ' ' + g('|') + b('/ __|') + ' ' + r('\'__/') + ' ' + g('_` |') + ' ' + b('|_') + r('| __|'),
                    '  ' + r('___) |') + ' ' + g('| | |') + '  ' + b('__/') + ' ' + r('|') + ' ' + g('|') + ' ' + b('(__') + r('| |') + ' ' + g('| (_| |') + '  ' + b('_|') + ' ' + r('|_'),
                    ' ' + r('|____/') + g('|_| |_|') + b('\\___|') + r('_|') + g('_|') + b('\\___|') + r('_|') + '  ' + g('\\__,_|') + b('_|') + '  ' + r('\\__|'),
                    ''
                    ])
#  ____  _          _ _                 __ _
# / ___|| |__   ___| | | ___ _ __ __ _ / _| |_
# \___ \| '_ \ / _ \ | |/ __| '__/ _` | |_| __|
#  ___) | | | |  __/ | | (__| | | (_| |  _| |_
# |____/|_| |_|\___|_|_|\___|_|  \__,_|_|  \__|

def _string(s):
    out = []
    for c in s:
        co = ord(c)
        if co >= 0x20 and co <= 0x7e and c not in '/$\'"`':
            out.append(c)
        else:
            out.append('\\x%02x' % co)
    return '"' + ''.join(out) + '"\n'

def _carray(s):
    out = []
    for c in s:
        out.append('0x' + pwn.enhex(c))
    return '{' + ', '.join(out) + '};\n'

def _hex(s):
    return pwn.enhex(s) + '\n'

if __name__ == '__main__':
    p = argparse.ArgumentParser(description = 'Microwave shellcode -- Easy, fast and delicious')
    p.add_argument('shellcode',
                   nargs = '?',
                   metavar = '<shellcode>',
                   choices = shellcodes.keys(),
                   help = 'The shellcode you want',
                   )
    p.add_argument('args',
                   nargs = '*',
                   metavar = '<arg>',
                   default = (),
                   help = 'Argument to the chosen shellcode',
                   )
    p.add_argument('-c', '--context',
                   metavar = '<opt>',
                   # choices = pwn.concat_all(pwn.possible_contexts.values()),
                   action = 'append',
                   help = 'The environment the shellcode will run in (default: %s), choose from %s' % \
                   (','.join(default_context),
                    '; '.join('%s: %s' % (k, ', '.join(v for v in vs)) for k, vs in pwn.possible_contexts.items())),
                   )
    p.add_argument('-?', '--show',
                   action = 'store_true',
                   help = 'Show shellcode documentation',
                   )
    p.add_argument('-o', '--out',
                   metavar = '<file>',
                   type = argparse.FileType('w'),
                   default = sys.stdout,
                   help = 'Output file (default: stdout)',
                   )
    p.add_argument('-l', '--list',
                   action = 'store_true',
                   help = 'List all the tasty shellcodes',
                   )
    p.add_argument('-f', '--format',
                   metavar = '<format>',
                   choices = ['r', 'raw',
                              's', 'str', 'string',
                              'c',
                              'h', 'hex',
                              'a', 'asm', 'assembly',
                              'p',
                              'i', 'hexii'],
                   default = 'hex',
                   help = 'Output format (default: hex), choose from {r}aw, {s}tring, {c}-style array, {h}ex string, hex{i}i, {a}ssembly code, {p}reprocssed code',
                   )
    p.add_argument('--trap-before',
                   action = 'store_true',
                   help = 'Insert breakpoint before code',
                   )
    p.add_argument('--trap-after',
                   action = 'store_true',
                   help = 'Insert breakpoint after code',
                   )
    p.add_argument('--loop',
                   action = 'store_true',
                   help = 'Insert infinite loop after code',
                   )
    p.add_argument('--nopsled',
                   metavar = '<n>',
                   type = int,
                   help = 'Prepend nopsled',
                   )
    p.add_argument('--tty',
                   action = 'store_true',
                   help = 'Force tty-behaviour, even if stdout is not a tty',
                   )
    p.add_argument('--list-unsupported',
                   action = 'store_true',
                   help = 'List shellcodes not supported by the chosen context',
                   )

    args = p.parse_args()

    pwn.context(*default_context) # 'reset' to defaults
    if args.context:
        ctx = []
        for c in args.context:
            ctx += c.split(',')
        pwn.context(*ctx) # overwrite one or more options

    if args.list:
        if sys.stdout.isatty() or args.tty:
            _height, width = os.popen('stty size', 'r').read().split()
            width = int(width)
            cs = [r, g, b]
            i = 0
            def printone(name, tags):
                global i
                if len(name) + len(tags) > width - 4:
                    tags = '   \\ ' + tags
                    print name + '\n' + tags
                else:
                    c = cs[i % len(cs)]
                    line = name + ' '
                    if len(line) % 2 == 0:
                        line += ' '
                    line += c('- ') * ((width - len(line) - len(tags)) // 2)
                    if (width - len(tags)) % 2 == 0:
                        line += ' '
                    line += tags
                    print line
                    i += 1
            print banner
            from pwn.context import _context as context
            good = {}
            bad = {}
            for x, _ in shellcodes.values():
                name, supported = x.func_name, x.supported_context
                isgood = True
                for k, vs in supported.items():
                    if context[k] not in vs:
                        isgood = False
                        break
                tags = []
                for cat, vals in supported.items():
                    if cat not in ['os', 'arch']:
                        tags += [' '.join(sorted(vals))]

                if 'os' in supported:
                    tags += [' '.join(sorted(supported['os']))]
                if 'arch' in supported:
                    tags += [' '.join(sorted(supported['arch']))]
                tags = ' | '.join(tags)
                if isgood:
                    good[name] = tags
                else:
                    bad[name] = tags
            print '   Choose from %d sexy shellcodes!' % len(good)
            for name, tags in sorted(good.items()):
                printone(name, tags)
            if bad and args.list_unsupported:
                print '  === ' + r('NOT SUPPORTED BY CHOSEN CONTEXT') + ' ==='
                for name, tags in sorted(bad.items()):
                    printone(name, tags)
        else:
            print ' '.join(sorted(shellcodes.keys()))
        exit()

    if args.shellcode is None:
        p.error('No shellcode specified')
        exit()

    orig, wrapped = shellcodes[args.shellcode]

    if args.show:
        print wrapped.func_doc
        exit()

    defargs = len(orig.func_defaults or ())
    reqargs = orig.func_code.co_argcount - defargs
    if len(args.args) < reqargs:
        if defargs > 0:
            p.error('%s takes at least %d arguments' % (args.shellcode, reqargs))
        else:
            p.error('%s takes exactly %d arguments' % (args.shellcode, reqargs))

    # Captain uglyness saves the day!
    for i in range(len(args.args)):
        if args.args[i] in ['False', 'false']:
            args.args[i] = False

    code = wrapped(*args.args)

    if args.format in ['a', 'asm', 'assembly']:
        print pwn.asm(code, emit_asm = 2)
        exit()
    if args.format == 'p':
        print pwn.asm(code, emit_asm = 1)
        exit()

    if args.nopsled:
        code = pwn.shellcode.nops(args.nopsled) + code
    if args.trap_before:
        code = pwn.shellcode.trap() + code
    if args.trap_after:
        code += pwn.shellcode.trap()
    if args.loop:
        code += pwn.shellcode.infloop()

    code = pwn.asm(code)

    if args.format in ['s', 'str', 'string']:
        code = _string(code)
    elif args.format == 'c':
        code = _carray(code)
    elif args.format in ['h', 'hex']:
        code = _hex(code)
    elif args.format in ['i', 'hexii']:
        code = pwn.hexii(code) + '\n'

    sys.stdout.write(code)
